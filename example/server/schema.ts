/**
 * Executable schema generated by Grats (https://grats.capt.dev)
 * Do not manually edit. Regenerate by running `npx grats`.
 */
import { Viewer as queryViewerResolver } from "./models/Viewer.ts";
import { GraphQLSchema, GraphQLObjectType, GraphQLList, GraphQLNonNull, GraphQLString, defaultFieldResolver } from "graphql";
async function assertNonNull<T>(value: T | Promise<T>): Promise<T> {
    const awaited = await value;
    if (awaited == null)
        throw new Error("Cannot return null for semantically non-nullable field.");
    return awaited;
}
export function getSchema(): GraphQLSchema {
    const UserType: GraphQLObjectType = new GraphQLObjectType({
        name: "User",
        fields() {
            return {
                name: {
                    name: "name",
                    type: GraphQLString,
                    resolve(source, args, context, info) {
                        return assertNonNull(defaultFieldResolver(source, args, context, info));
                    }
                }
            };
        }
    });
    const PostType: GraphQLObjectType = new GraphQLObjectType({
        name: "Post",
        fields() {
            return {
                author: {
                    name: "author",
                    type: UserType,
                    resolve(source, args, context, info) {
                        return assertNonNull(defaultFieldResolver(source, args, context, info));
                    }
                },
                content: {
                    name: "content",
                    type: GraphQLString,
                    resolve(source, args, context, info) {
                        return assertNonNull(defaultFieldResolver(source, args, context, info));
                    }
                },
                id: {
                    name: "id",
                    type: GraphQLString,
                    resolve(source, args, context, info) {
                        return assertNonNull(defaultFieldResolver(source, args, context, info));
                    }
                },
                title: {
                    name: "title",
                    type: GraphQLString,
                    resolve(source, args, context, info) {
                        return assertNonNull(defaultFieldResolver(source, args, context, info));
                    }
                }
            };
        }
    });
    const FeedType: GraphQLObjectType = new GraphQLObjectType({
        name: "Feed",
        description: "Models the current users's news feed.",
        fields() {
            return {
                posts: {
                    name: "posts",
                    type: new GraphQLList(new GraphQLNonNull(PostType)),
                    resolve(source, args, context, info) {
                        return assertNonNull(defaultFieldResolver(source, args, context, info));
                    }
                }
            };
        }
    });
    const ViewerType: GraphQLObjectType = new GraphQLObjectType({
        name: "Viewer",
        description: "Models the currently logged in user. Values which are specific to the current\nuser are exposed here.",
        fields() {
            return {
                feed: {
                    name: "feed",
                    type: FeedType,
                    resolve(source, args, context, info) {
                        return assertNonNull(defaultFieldResolver(source, args, context, info));
                    }
                },
                user: {
                    name: "user",
                    type: UserType,
                    resolve(source, args, context, info) {
                        return assertNonNull(defaultFieldResolver(source, args, context, info));
                    }
                }
            };
        }
    });
    const QueryType: GraphQLObjectType = new GraphQLObjectType({
        name: "Query",
        fields() {
            return {
                viewer: {
                    name: "viewer",
                    type: ViewerType,
                    resolve(source) {
                        return assertNonNull(queryViewerResolver.viewer(source));
                    }
                }
            };
        }
    });
    return new GraphQLSchema({
        query: QueryType,
        types: [FeedType, PostType, QueryType, UserType, ViewerType]
    });
}
